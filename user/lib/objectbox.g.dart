// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'model/condition.entity.dart';
import 'model/item.entity.dart';
import 'model/plan.entity.model.dart';
import 'model/symptom.entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 1903011254579719916),
      name: 'Item',
      lastPropertyId: const IdUid(10, 1081995962852051789),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8026742067914846765),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3403327070671809945),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4477253838581226508),
            name: 'alsoCalled',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5763331632012494661),
            name: 'partUsed',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3973098183593134962),
            name: 'source',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4375043172325113776),
            name: 'formsAvailable',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2116737161334687215),
            name: 'uses',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 276435706378502597),
            name: 'caution',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2445717838536895213),
            name: 'consumerInfo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1081995962852051789),
            name: 'references',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 1966533624244129117),
      name: 'Conditions',
      lastPropertyId: const IdUid(6, 9111419610059559968),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1349339818986546333),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 352385846039077532),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9085284176091694185),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 792827001265069545),
            name: 'causes',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7766543554273177516),
            name: 'complications',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9111419610059559968),
            name: 'isSelected',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 4575875131223212416),
      name: 'Symptoms',
      lastPropertyId: const IdUid(6, 695395755464468694),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1724409736652803297),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4577406097205428317),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6881348032747091817),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3278797702413526799),
            name: 'causes',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1363405949316445053),
            name: 'complications',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 695395755464468694),
            name: 'isSelected',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 8150156157682383431),
      name: 'Plan',
      lastPropertyId: const IdUid(10, 2811248843954191461),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 466946951409669534),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6745097383755743941),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 547741291980568833),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3543519101095518930),
            name: 'symptomOrCondition',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3449278522333578884),
            name: 'herbalAlternativeNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1948348258052548755),
            name: 'howToUseList',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2811248843954191461),
            name: 'cautionList',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(6, 8150156157682383431),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [6996641867010639043, 8428030114654940011],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        939184856482775463,
        991969603301181828,
        6327529383786079147,
        8936531565315934033,
        7964879782990342903,
        7612645864138263967,
        9002226558457362575,
        1851100795372671687,
        4383594759343017389,
        5980841042833645411,
        420380583510016754
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Item: EntityDefinition<Item>(
        model: _entities[0],
        toOneRelations: (Item object) => [],
        toManyRelations: (Item object) => {},
        getId: (Item object) => object.id,
        setId: (Item object, int id) {
          object.id = id;
        },
        objectToFB: (Item object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final alsoCalledOffset = fbb.writeString(object.alsoCalled);
          final partUsedOffset = fbb.writeString(object.partUsed);
          final sourceOffset = fbb.writeString(object.source);
          final formsAvailableOffset = fbb.writeString(object.formsAvailable);
          final usesOffset = fbb.writeString(object.uses);
          final cautionOffset = fbb.writeString(object.caution);
          final consumerInfoOffset = fbb.writeString(object.consumerInfo);
          final referencesOffset = fbb.writeString(object.references);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, alsoCalledOffset);
          fbb.addOffset(3, partUsedOffset);
          fbb.addOffset(4, sourceOffset);
          fbb.addOffset(5, formsAvailableOffset);
          fbb.addOffset(6, usesOffset);
          fbb.addOffset(7, cautionOffset);
          fbb.addOffset(8, consumerInfoOffset);
          fbb.addOffset(9, referencesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final alsoCalledParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final partUsedParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final sourceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final formsAvailableParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final usesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final cautionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final consumerInfoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final referencesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final object = Item(
              nameParam,
              alsoCalledParam,
              partUsedParam,
              sourceParam,
              formsAvailableParam,
              usesParam,
              cautionParam,
              consumerInfoParam,
              referencesParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Conditions: EntityDefinition<Conditions>(
        model: _entities[1],
        toOneRelations: (Conditions object) => [],
        toManyRelations: (Conditions object) => {},
        getId: (Conditions object) => object.id,
        setId: (Conditions object, int id) {
          object.id = id;
        },
        objectToFB: (Conditions object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final causesOffset = fbb.writeList(
              object.causes.map(fbb.writeString).toList(growable: false));
          final complicationsOffset = fbb.writeList(object.complications
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, causesOffset);
          fbb.addOffset(4, complicationsOffset);
          fbb.addBool(5, object.isSelected);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final complicationsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 12, []);
          final causesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 10, []);
          final object = Conditions(idParam, nameParam, descriptionParam,
              complicationsParam, causesParam)
            ..isSelected =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);

          return object;
        }),
    Symptoms: EntityDefinition<Symptoms>(
        model: _entities[2],
        toOneRelations: (Symptoms object) => [],
        toManyRelations: (Symptoms object) => {},
        getId: (Symptoms object) => object.id,
        setId: (Symptoms object, int id) {
          object.id = id;
        },
        objectToFB: (Symptoms object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final causesOffset = fbb.writeList(
              object.causes.map(fbb.writeString).toList(growable: false));
          final complicationsOffset = fbb.writeList(object.complications
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, causesOffset);
          fbb.addOffset(4, complicationsOffset);
          fbb.addBool(5, object.isSelected);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final complicationsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 12, []);
          final causesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 10, []);
          final object = Symptoms(idParam, nameParam, descriptionParam,
              complicationsParam, causesParam)
            ..isSelected =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);

          return object;
        }),
    Plan: EntityDefinition<Plan>(
        model: _entities[3],
        toOneRelations: (Plan object) => [],
        toManyRelations: (Plan object) => {},
        getId: (Plan object) => object.id,
        setId: (Plan object, int id) {
          object.id = id;
        },
        objectToFB: (Plan object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final symptomOrConditionOffset =
              fbb.writeString(object.symptomOrCondition);
          final herbalAlternativeNamesOffset = fbb.writeList(object
              .herbalAlternativeNames
              .map(fbb.writeString)
              .toList(growable: false));
          final howToUseListOffset = fbb.writeList(
              object.howToUseList.map(fbb.writeString).toList(growable: false));
          final cautionListOffset = fbb.writeList(
              object.cautionList.map(fbb.writeString).toList(growable: false));
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, symptomOrConditionOffset);
          fbb.addOffset(7, herbalAlternativeNamesOffset);
          fbb.addOffset(8, howToUseListOffset);
          fbb.addOffset(9, cautionListOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final symptomOrConditionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final herbalAlternativeNamesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 18, []);
          final howToUseListParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 20, []);
          final cautionListParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 22, []);
          final object = Plan(
              nameParam,
              descriptionParam,
              symptomOrConditionParam,
              herbalAlternativeNamesParam,
              howToUseListParam,
              cautionListParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Item] entity fields to define ObjectBox queries.
class Item_ {
  /// see [Item.id]
  static final id = QueryIntegerProperty<Item>(_entities[0].properties[0]);

  /// see [Item.name]
  static final name = QueryStringProperty<Item>(_entities[0].properties[1]);

  /// see [Item.alsoCalled]
  static final alsoCalled =
      QueryStringProperty<Item>(_entities[0].properties[2]);

  /// see [Item.partUsed]
  static final partUsed = QueryStringProperty<Item>(_entities[0].properties[3]);

  /// see [Item.source]
  static final source = QueryStringProperty<Item>(_entities[0].properties[4]);

  /// see [Item.formsAvailable]
  static final formsAvailable =
      QueryStringProperty<Item>(_entities[0].properties[5]);

  /// see [Item.uses]
  static final uses = QueryStringProperty<Item>(_entities[0].properties[6]);

  /// see [Item.caution]
  static final caution = QueryStringProperty<Item>(_entities[0].properties[7]);

  /// see [Item.consumerInfo]
  static final consumerInfo =
      QueryStringProperty<Item>(_entities[0].properties[8]);

  /// see [Item.references]
  static final references =
      QueryStringProperty<Item>(_entities[0].properties[9]);
}

/// [Conditions] entity fields to define ObjectBox queries.
class Conditions_ {
  /// see [Conditions.id]
  static final id =
      QueryIntegerProperty<Conditions>(_entities[1].properties[0]);

  /// see [Conditions.name]
  static final name =
      QueryStringProperty<Conditions>(_entities[1].properties[1]);

  /// see [Conditions.description]
  static final description =
      QueryStringProperty<Conditions>(_entities[1].properties[2]);

  /// see [Conditions.causes]
  static final causes =
      QueryStringVectorProperty<Conditions>(_entities[1].properties[3]);

  /// see [Conditions.complications]
  static final complications =
      QueryStringVectorProperty<Conditions>(_entities[1].properties[4]);

  /// see [Conditions.isSelected]
  static final isSelected =
      QueryBooleanProperty<Conditions>(_entities[1].properties[5]);
}

/// [Symptoms] entity fields to define ObjectBox queries.
class Symptoms_ {
  /// see [Symptoms.id]
  static final id = QueryIntegerProperty<Symptoms>(_entities[2].properties[0]);

  /// see [Symptoms.name]
  static final name = QueryStringProperty<Symptoms>(_entities[2].properties[1]);

  /// see [Symptoms.description]
  static final description =
      QueryStringProperty<Symptoms>(_entities[2].properties[2]);

  /// see [Symptoms.causes]
  static final causes =
      QueryStringVectorProperty<Symptoms>(_entities[2].properties[3]);

  /// see [Symptoms.complications]
  static final complications =
      QueryStringVectorProperty<Symptoms>(_entities[2].properties[4]);

  /// see [Symptoms.isSelected]
  static final isSelected =
      QueryBooleanProperty<Symptoms>(_entities[2].properties[5]);
}

/// [Plan] entity fields to define ObjectBox queries.
class Plan_ {
  /// see [Plan.id]
  static final id = QueryIntegerProperty<Plan>(_entities[3].properties[0]);

  /// see [Plan.name]
  static final name = QueryStringProperty<Plan>(_entities[3].properties[1]);

  /// see [Plan.description]
  static final description =
      QueryStringProperty<Plan>(_entities[3].properties[2]);

  /// see [Plan.symptomOrCondition]
  static final symptomOrCondition =
      QueryStringProperty<Plan>(_entities[3].properties[3]);

  /// see [Plan.herbalAlternativeNames]
  static final herbalAlternativeNames =
      QueryStringVectorProperty<Plan>(_entities[3].properties[4]);

  /// see [Plan.howToUseList]
  static final howToUseList =
      QueryStringVectorProperty<Plan>(_entities[3].properties[5]);

  /// see [Plan.cautionList]
  static final cautionList =
      QueryStringVectorProperty<Plan>(_entities[3].properties[6]);
}
